<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on ouuan的博客</title>
    <link>https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on ouuan的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Oct 2019 19:50:25 +0800</lastBuildDate>
    
	<atom:link href="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于 Capacity Scaling 的弱多项式复杂度最小费用流算法</title>
      <link>https://ouuan.github.io/post/%E5%9F%BA%E4%BA%8E-capacity-scaling-%E7%9A%84%E5%BC%B1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 26 Oct 2019 19:50:25 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E5%9F%BA%E4%BA%8E-capacity-scaling-%E7%9A%84%E5%BC%B1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;大多数人所使用的费用流算法，即每次求出残量网络中 $s$ 到 $t$ 关于费用的最短路进行增广（将 Dinic 最大流算法中的 BFS 改为 SPFA），是伪多项式复杂度的，最坏情况下复杂度为 $O(nmf)$，其中 $f$ 为最大流。已知有一种在点数为 $n$，边数为 $O(n^2)$，值域为 $O(2^{n/2})$ 时将其用时卡成关于 $n$ 的指数级复杂度的构造方法。&lt;/p&gt;
&lt;p&gt;本文将介绍一种复杂度为进行 $O(m\log U)$ 次（$U$ 表示边的最大容量）无负权边单源最短路（使用 &lt;code&gt;priority_queue&lt;/code&gt; 实现 Dijkstra 算法，总复杂度即为 $O(m^2\log U\log m)$）的弱多项式复杂度算法。&lt;/p&gt;
&lt;p&gt;其实这个算法并不是很复杂（只是相关资料比较少，会对学习造成一定困难，这也是我写这篇博客的原因），最小费用最大流的模板也只需要 $2.5KB$，并不比常见的伪多项式复杂度算法长很多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LGV 引理学习笔记</title>
      <link>https://ouuan.github.io/post/lgv-%E5%BC%95%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 03 Sep 2019 21:54:43 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/lgv-%E5%BC%95%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;Lindström–Gessel–Viennot lemma，即 LGV 引理，可以用来处理有向无环图上不相交路径计数等问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线性基学习笔记</title>
      <link>https://ouuan.github.io/post/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 12 Jun 2019 15:20:12 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;又是在网上搜不到讲的比较清楚的博客的算法&amp;hellip;虽然没找到写的好的博客，但结合若干篇写的不算太差的博客，勉强是学会了..&lt;/p&gt;
&lt;p&gt;线性基在 OI 中特指集合为若干个非负整数，运算为异或的线性基，通常用来处理一些异或相关的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>回文自动机（PAM）学习笔记</title>
      <link>https://ouuan.github.io/post/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BApam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 10 May 2019 22:31:05 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BApam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;PAM 是一种处理回文串相关问题的有力工具。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;又是一句废话。&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AC自动机学习笔记</title>
      <link>https://ouuan.github.io/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Apr 2019 15:39:10 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;AC 自动机其实我去年就学过了，但当时大约只是会敲模板而已..现在几乎全忘光了。于是复习一下，顺便（较为本质地）讲解一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树分块学习笔记</title>
      <link>https://ouuan.github.io/post/%E6%A0%91%E5%88%86%E5%9D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 30 Mar 2019 21:18:50 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E6%A0%91%E5%88%86%E5%9D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;最近发现 &lt;a href=&#34;https://oi-wiki.org/&#34; target=&#34;_blank&#34;&gt;OI Wiki&lt;/a&gt; 的“树分块”是空的，本来想凭着之前写的&lt;a href=&#34;https://ouuan.github.io/%E8%8E%AB%E9%98%9F%E3%80%81%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%81%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/&#34; target=&#34;_blank&#34;&gt;莫队教程&lt;/a&gt;水一水，结果被告知已经有人写过树上莫队了..于是就得详细介绍一下树分块除了树上莫队以外的应用..然而我除了糖果公园只做过一道树分块..（结果最后并没有找到这道题以外的其它题..）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树状数组——从背模板到树套树</title>
      <link>https://ouuan.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E4%BB%8E%E8%83%8C%E6%A8%A1%E6%9D%BF%E5%88%B0%E6%A0%91%E5%A5%97%E6%A0%91/</link>
      <pubDate>Tue, 26 Mar 2019 21:38:45 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E4%BB%8E%E8%83%8C%E6%A8%A1%E6%9D%BF%E5%88%B0%E6%A0%91%E5%A5%97%E6%A0%91/</guid>
      <description>&lt;p&gt;&lt;del&gt;这是一篇披着PJ组数据结构外衣的树套树教程。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;大约会（尝试着）较为本质地简介一下树状数组？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cdq分治学习笔记</title>
      <link>https://ouuan.github.io/post/cdq%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 26 Mar 2019 18:49:44 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/cdq%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;cdq分治也是咕了好久了..最近总算把它学了。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;cdq分治是一种离线算法，可以代替一些复杂的数据结构，降低代码难度，减小常数。&lt;/del&gt;废话大家都知道。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后缀自动机（SAM）学习笔记</title>
      <link>https://ouuan.github.io/post/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BAsam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 22 Feb 2019 12:31:37 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BAsam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;后缀自动机是一种处理字符串问题的有力工具（废话），它的码量不比后缀数组大（实际代码难度不比后缀数组小，但也不难），处理问题时的思维难度往往比后缀数组小，复杂度更优秀。若字符集大小为 $|\Sigma|$，则：构建时间复杂度 $O(n|\Sigma|)$，转移时间复杂度 $O(1)$，空间复杂度 $O(n|\Sigma|)$ 或 构建时间复杂度 $O(n\log|\Sigma|)$，转移时间复杂度 $O(\log|\Sigma|)$，空间复杂度 $O(n)$。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后缀数组学习笔记</title>
      <link>https://ouuan.github.io/post/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 17 Feb 2019 13:53:54 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;后缀数组是一种处理字符串问题的有力工具（废话），本文的主要特点是一步步地由最朴素的后缀数组构建方法逐步优化，而非直接给出最终优化后的代码。&lt;/p&gt;
&lt;p&gt;希望这篇文章能让更多的人看懂后缀数组的代码，学会后缀数组。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树上背包的上下界优化</title>
      <link>https://ouuan.github.io/post/%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%95%8C%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 28 Nov 2018 17:16:35 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%95%8C%E4%BC%98%E5%8C%96/</guid>
      <description>最近做了几道树上背包的题目，很多题目的数据范围都很小，但实际上树上背包有多种方式可以优化到 $O(nm)$ （$n$ 为节点数，$m$ 为体积的值域），比如先序</description>
    </item>
    
    <item>
      <title>浅谈邻项交换排序的应用以及需要注意的问题</title>
      <link>https://ouuan.github.io/post/%E6%B5%85%E8%B0%88%E9%82%BB%E9%A1%B9%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 18 Nov 2018 08:05:50 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E6%B5%85%E8%B0%88%E9%82%BB%E9%A1%B9%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>浅谈邻项交换排序的应用以及需要注意的问题.pdf 邻项交换排序是一种常见的贪心算法，通过比较两个相邻元素交换前后的优劣对整个序列进行排序，从而</description>
    </item>
    
    <item>
      <title>莫队、带修莫队、树上莫队详解</title>
      <link>https://ouuan.github.io/post/%E8%8E%AB%E9%98%9F%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 30 Sep 2018 17:19:58 +0800</pubDate>
      
      <guid>https://ouuan.github.io/post/%E8%8E%AB%E9%98%9F%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>这几天学习了莫队算法，试着写一篇比较详细的莫队教程吧&amp;hellip; 普通莫队 简介 莫队是一种基于分块思想的离线算法，用于解决区间问题，适用范围</description>
    </item>
    
  </channel>
</rss>